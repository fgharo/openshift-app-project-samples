pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'MINUTES')
    }

    agent {
      node {
          		label 'nodejs'
    	}
    }

    environment {
        DEV_PROJECT = "fharo-practice"

        APP_NAME = "tictactoe"
        PATH_TO_BINARY_DIR = "./${APP_NAME}"
    }

    stages {
        stage('Installing Dependencies'){
          steps {
            dir(env.APP_NAME){
              sh 'npm install'
            }
          }
        }

        stage('Run Unit Tests') {
            steps {
                dir(env.APP_NAME){
                // test hanging.
                //  sh 'npm run test-headless'
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                dir(env.APP_NAME){
                  // sh 'npm run lint'
                }
            }
        }

        stage('Compile & Build Dist') {
            steps {
                dir(env.APP_NAME){
                  sh 'npm run build'
                }
            }
        }

        stage('Launch app in DEV') {
            steps {
                sh '''
                    oc project ${DEV_PROJECT}
                    oc set triggers dc/${APP_NAME} --manual
      			        oc start-build bc/${APP_NAME} --from-dir=${PATH_TO_BINARY_DIR} --wait=true --follow=true
      			        oc rollout latest dc/${APP_NAME}
                   '''
            }
        }

        stage('Wait for deployment in DEV env') {
      	    steps {
      		      waitOnRolloutCompletion(env.DEV_PROJECT, env.APP_NAME)

                sh '''
                        echo "Deployment to Dev env is complete. Access the API endpoint at the URL"
                        oc get route ${APP_NAME} -n ${DEV_PROJECT} -o jsonpath='{ .spec.host }'
                   '''
      	    }
      	}
    }
}

def waitOnRolloutCompletion(project, app){
	 def dc_version = sh(returnStdout: true, script: "oc get dc ${app} --template={{.status.latestVersion}} -n ${project}").trim()
	 def replication_controller = app + "-" + dc_version

   def currentNumOfReplicas = sh(returnStdout: true, script: "oc get rc ${replication_controller} --template={{.status.readyReplicas}} -n ${project}").trim()
	 def expectedNumOfReplicas = sh(returnStdout: true, script: "oc get rc ${replication_controller} --template={{.status.replicas}} -n ${project}").trim()

	 echo "Waiting for ReplicationController ${replication_controller} to replicate expected number of replicas."
	 while (currentNumOfReplicas != expectedNumOfReplicas){
            sleep 5
            currentNumOfReplicas = sh(returnStdout: true, script: "oc get rc ${replication_controller} --template={{.status.readyReplicas}} -n ${project}").trim()
	          expectedNumOfReplicas = sh(returnStdout: true, script: "oc get rc ${replication_controller} --template={{.status.replicas}} -n ${project}").trim()
	          echo "${currentNumOfReplicas} vs ${expectedNumOfReplicas}"
	 }
}
